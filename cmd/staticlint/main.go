// MyAnalyzer ...
package main

import (
	"go/ast"
	"regexp"

	"golang.org/x/tools/go/analysis"
	"golang.org/x/tools/go/analysis/multichecker"
	"golang.org/x/tools/go/analysis/passes/printf"
	"golang.org/x/tools/go/analysis/passes/shadow"
	"golang.org/x/tools/go/analysis/passes/shift"
	"golang.org/x/tools/go/analysis/passes/structtag"
	"honnef.co/go/tools/staticcheck"
)

// MyErrCheckAnalyzer ...
var MyErrCheckAnalyzer = &analysis.Analyzer{
	Name: "errcheck",
	Doc:  "check for unchecked errors",
	Run:  run,
}

// MyChecks ...
var MyChecks []*analysis.Analyzer

// ast inspect func
func astInspectFunc(file *ast.File, pass *analysis.Pass) {
	for _, cg := range file.Comments {
		for _, comment := range cg.List {
			if regexp.MustCompile(`^// Code generated by .* DO NOT EDIT\.$`).MatchString(comment.Text) {
				return
			}
		}
	}
	var parentFunc string
	ast.Inspect(file, func(node ast.Node) bool {
		switch x := node.(type) {
		case *ast.FuncDecl:
			parentFunc = x.Name.Name
		case *ast.ExprStmt:
			if c, ok := x.X.(*ast.CallExpr); ok {
				if s, ok := c.Fun.(*ast.SelectorExpr); ok {
					if parentFunc == "main" && s.X.(*ast.Ident).Name == "os" && s.Sel.Name == "Exit" {
						pass.Reportf(s.Sel.NamePos, "used os.Exit in main file")
					}
				}
			}
		}

		return true
	})
}

// run is the main linter function
func run(pass *analysis.Pass) (interface{}, error) {
	if pass.Pkg.Name() == "main" {
		for _, file := range pass.Files {
			astInspectFunc(file, pass)
		}
	}
	return nil, nil
}

func main() {
	var MyChecks = []*analysis.Analyzer{printf.Analyzer, shadow.Analyzer, structtag.Analyzer, shift.Analyzer, MyErrCheckAnalyzer}
	checks := map[string]bool{
		"SA": true,
		"ST": true,
	}
	for _, v := range staticcheck.Analyzers {
		if checks[v.Analyzer.Name] {
			MyChecks = append(MyChecks, v.Analyzer)
		}
	}
	multichecker.Main(
		MyChecks...,
	)
}
